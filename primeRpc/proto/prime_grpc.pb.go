// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: prime.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PrimeClient is the client API for Prime service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PrimeClient interface {
	Decompose(ctx context.Context, in *Request, opts ...grpc.CallOption) (Prime_DecomposeClient, error)
}

type primeClient struct {
	cc grpc.ClientConnInterface
}

func NewPrimeClient(cc grpc.ClientConnInterface) PrimeClient {
	return &primeClient{cc}
}

func (c *primeClient) Decompose(ctx context.Context, in *Request, opts ...grpc.CallOption) (Prime_DecomposeClient, error) {
	stream, err := c.cc.NewStream(ctx, &Prime_ServiceDesc.Streams[0], "/prime.Prime/Decompose", opts...)
	if err != nil {
		return nil, err
	}
	x := &primeDecomposeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Prime_DecomposeClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type primeDecomposeClient struct {
	grpc.ClientStream
}

func (x *primeDecomposeClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PrimeServer is the server API for Prime service.
// All implementations must embed UnimplementedPrimeServer
// for forward compatibility
type PrimeServer interface {
	Decompose(*Request, Prime_DecomposeServer) error
	mustEmbedUnimplementedPrimeServer()
}

// UnimplementedPrimeServer must be embedded to have forward compatible implementations.
type UnimplementedPrimeServer struct {
}

func (UnimplementedPrimeServer) Decompose(*Request, Prime_DecomposeServer) error {
	return status.Errorf(codes.Unimplemented, "method Decompose not implemented")
}
func (UnimplementedPrimeServer) mustEmbedUnimplementedPrimeServer() {}

// UnsafePrimeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrimeServer will
// result in compilation errors.
type UnsafePrimeServer interface {
	mustEmbedUnimplementedPrimeServer()
}

func RegisterPrimeServer(s grpc.ServiceRegistrar, srv PrimeServer) {
	s.RegisterService(&Prime_ServiceDesc, srv)
}

func _Prime_Decompose_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PrimeServer).Decompose(m, &primeDecomposeServer{stream})
}

type Prime_DecomposeServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type primeDecomposeServer struct {
	grpc.ServerStream
}

func (x *primeDecomposeServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

// Prime_ServiceDesc is the grpc.ServiceDesc for Prime service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Prime_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "prime.Prime",
	HandlerType: (*PrimeServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Decompose",
			Handler:       _Prime_Decompose_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "prime.proto",
}
